package com.amongus.bot.commands;

import com.amongus.bot.core.AmongUsBot;
import com.amongus.bot.core.SessionManager;
import com.amongus.bot.game.lobby.GameLobby;
import com.amongus.bot.models.Config;
import com.amongus.bot.models.Player;
import com.amongus.bot.utils.SecurityManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * Command that allows a player to join an existing game lobby.
 */
public class JoinCommand extends BaseCommand {
    private static final Logger log = LoggerFactory.getLogger(JoinCommand.class);
    private final SecurityManager securityManager;

    public JoinCommand(AmongUsBot bot, SessionManager sessionManager, SecurityManager securityManager) {
        super(bot, sessionManager);
        this.securityManager = securityManager;
    }

    @Override
    public String getName() {
        return "join";
    }

    @Override
    public String getDescription() {
        return "Joins an existing game lobby using a lobby code.";
    }

    @Override
    public void execute(Message message, String args) {
        String chatId = String.valueOf(message.getFrom().getId());
        User telegramUser = message.getFrom();

        if (args.isEmpty()) {
            SendMessage sendMessage = new SendMessage();
            sendMessage.setChatId(chatId);
            sendMessage.setText("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –ª–æ–±–±–∏:\n/join XXXXX");
            execute(sendMessage);
            return;
        }

        String lobbyCode = args.toUpperCase();
        Player player = Player.fromTelegramUser(telegramUser);

        boolean joined = sessionManager.joinLobby(lobbyCode, player);
        if (joined) {
            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ì–æ—Ç–æ–≤"
            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton readyButton = new InlineKeyboardButton();
            readyButton.setText("–ì–æ—Ç–æ–≤");
            readyButton.setCallbackData("ready");
            row.add(readyButton);
            keyboard.add(row);
            markup.setKeyboard(keyboard);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            SendMessage welcomeMessage = new SendMessage();
            welcomeMessage.setChatId(chatId);
            welcomeMessage.setText("‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ª–æ–±–±–∏ *" + lobbyCode + "*!");
            welcomeMessage.enableMarkdown(true);
            execute(welcomeMessage);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞
            sessionManager.updatePlayerChatId(player.getUserId(), chatId);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π
            Optional<GameLobby> lobbyOpt = sessionManager.getLobbyByCode(lobbyCode);
            if (lobbyOpt.isPresent()) {
                GameLobby lobby = lobbyOpt.get();

                // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                StringBuilder statusBuilder = new StringBuilder();
                statusBuilder.append("üë• *–ò–≥—Ä–æ–∫–∏* (").append(lobby.getPlayers().size()).append("/").append(Config.MAX_PLAYERS).append("):\n");
                for (Player p : lobby.getPlayers()) {
                    String readyStatus = p.isReady() ? "‚úÖ" : "‚¨ú";
                    String ownerLabel = lobby.isOwner(p.getUserId()) ? " üëë" : "";
                    statusBuilder.append(readyStatus).append(" ")
                            .append(p.getDisplayName())
                            .append(ownerLabel)
                            .append("\n");
                }

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
                Integer statusMessageId = bot.sendMessageWithReturnIdSafe(chatId, statusBuilder.toString(), markup);
                if (statusMessageId != null) {
                    lobby.setStatusMessageId(player.getUserId(), statusMessageId);
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –ª–æ–±–±–∏
                for (Player p : lobby.getPlayers()) {
                    // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞, —Ç–∞–∫ –∫–∞–∫ –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if (p.getUserId() != player.getUserId()) {
                        updatePlayerStatus(lobby, p);
                    }
                }
            }
        } else {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
            SendMessage sendMessage = new SendMessage();
            sendMessage.setChatId(chatId);
            sendMessage.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ª–æ–±–±–∏ —Å –∫–æ–¥–æ–º *" + lobbyCode + "*!");
            sendMessage.enableMarkdown(true);
            execute(sendMessage);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ –≤ –ª–æ–±–±–∏
     */
    private void updatePlayerStatus(GameLobby lobby, Player player) {
        String chatId = sessionManager.getPlayerChatId(player.getUserId());
        if (chatId == null) {
            return;
        }

        StringBuilder sb = new StringBuilder();
        sb.append("üë• *–ò–≥—Ä–æ–∫–∏* (").append(lobby.getPlayers().size()).append("/").append(Config.MAX_PLAYERS).append("):\n");
        for (Player p : lobby.getPlayers()) {
            String readyStatus = p.isReady() ? "‚úÖ" : "‚¨ú";
            String ownerLabel = lobby.isOwner(p.getUserId()) ? " üëë" : "";
            sb.append(readyStatus).append(" ")
                    .append(p.getDisplayName())
                    .append(ownerLabel)
                    .append("\n");
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ª–æ–±–±–∏
        Integer statusMessageId = lobby.getStatusMessageId(player.getUserId());

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤" –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –≥–æ—Ç–æ–≤
        if (!player.isReady()) {
            List<InlineKeyboardButton> readyRow = new ArrayList<>();
            InlineKeyboardButton readyButton = new InlineKeyboardButton();
            readyButton.setText("–ì–æ—Ç–æ–≤");
            readyButton.setCallbackData("ready");
            readyRow.add(readyButton);
            keyboard.add(readyRow);
        }

        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ - –≤–ª–∞–¥–µ–ª–µ—Ü, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
        if (lobby.isOwner(player.getUserId())) {
            // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            List<InlineKeyboardButton> settingsRow = new ArrayList<>();
            InlineKeyboardButton settingsButton = new InlineKeyboardButton();
            settingsButton.setText("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏");
            settingsButton.setCallbackData("settings");
            settingsRow.add(settingsButton);
            keyboard.add(settingsRow);

            // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
            List<InlineKeyboardButton> startGameRow = new ArrayList<>();
            InlineKeyboardButton startGameButton = new InlineKeyboardButton();
            startGameButton.setText("üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É");
            startGameButton.setCallbackData("start_game");
            startGameRow.add(startGameButton);
            keyboard.add(startGameRow);
        }

        markup.setKeyboard(keyboard);

        // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞, —É—Å—Ç–∞–Ω–æ–≤–∏–º null –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if (keyboard.isEmpty()) {
            markup = null;
        }

        try {
            if (statusMessageId != null) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try {
                    EditMessageText editMessage = new EditMessageText();
                    editMessage.setChatId(chatId);
                    editMessage.setMessageId(statusMessageId);
                    editMessage.setText(sb.toString());
                    editMessage.enableMarkdown(true);
                    editMessage.setReplyMarkup(markup);
                    bot.execute(editMessage);
                } catch (TelegramApiException e) {
                    // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    Integer newMessageId = markup != null
                            ? bot.sendMessageWithReturnIdSafe(chatId, sb.toString(), markup)
                            : bot.sendTextMessageWithReturnIdSafe(chatId, sb.toString());
                    if (newMessageId != null) {
                        lobby.setStatusMessageId(player.getUserId(), newMessageId);
                    }
                }
            } else {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
                Integer newMessageId = markup != null
                        ? bot.sendMessageWithReturnIdSafe(chatId, sb.toString(), markup)
                        : bot.sendTextMessageWithReturnIdSafe(chatId, sb.toString());
                if (newMessageId != null) {
                    lobby.setStatusMessageId(player.getUserId(), newMessageId);
                }
            }
        } catch (Exception e) {
            log.error("Error updating player status: " + e.getMessage(), e);
        }
    }
}
