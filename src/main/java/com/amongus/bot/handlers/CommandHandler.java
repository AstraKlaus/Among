package com.amongus.bot.handlers;

import com.amongus.bot.commands.*;
import com.amongus.bot.core.AmongUsBot;
import com.amongus.bot.commands.*;
import com.amongus.bot.core.SessionManager;
import com.amongus.bot.game.lobby.GameLobby;
import com.amongus.bot.models.Config;
import com.amongus.bot.models.GameSettings;
import com.amongus.bot.models.Player;
import com.amongus.bot.utils.SecurityManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * Handles command messages from users.
 */
public class CommandHandler {
    private static final Logger log = LoggerFactory.getLogger(CommandHandler.class);
    
    private final AmongUsBot bot;
    private final SessionManager sessionManager;
    private final SecurityManager securityManager;
    private final Map<String, Command> commands;
    
    /**
     * Creates a new command handler.
     */
    public CommandHandler(AmongUsBot bot, SessionManager sessionManager, SecurityManager securityManager) {
        this.bot = bot;
        this.sessionManager = sessionManager;
        this.securityManager = securityManager;
        // Initialize commands
        this.commands = new HashMap<>();
        registerCommands();
    }
    
    /**
     * Registers all available commands.
     */
    private void registerCommands() {
        // Game creation commands
        registerCommand(new StartCommand(bot, sessionManager, securityManager));
        registerCommand(new JoinCommand(bot, sessionManager, securityManager));
        registerCommand(new LeaveCommand(bot, sessionManager, securityManager));
        registerCommand(new StartGameCommand(bot, sessionManager, securityManager));
        
        // Information commands
        registerCommand(new HelpCommand(bot, sessionManager, securityManager));
        registerCommand(new PlayersCommand(bot, sessionManager, securityManager));
        registerCommand(new RulesCommand(bot, sessionManager, securityManager));
        
        // Admin commands
        registerCommand(new EndGameCommand(bot, sessionManager, securityManager));
        registerCommand(new KickCommand(bot, sessionManager, securityManager));
    }
    
    /**
     * Registers a command.
     */
    private void registerCommand(Command command) {
        commands.put(command.getName(), command);
        for (String alias : command.getAliases()) {
            commands.put(alias, command);
        }
    }
    
    /**
     * Handles a command message.
     */
    public void handleCommand(Message message) {
        String text = message.getText();
        String[] parts = text.split("\\s+", 2);
        String commandName = parts[0].substring(1).toLowerCase(); // Remove the leading '/'
        String args = parts.length > 1 ? parts[1] : "";
        
        Command command = commands.get(commandName);
        
        if (command != null) {
            try {
                log.debug("Executing command: {} from user {}", commandName, message.getFrom().getId());
                command.execute(message, args);
            } catch (Exception e) {
                log.error("Error executing command {}: {}", commandName, e.getMessage(), e);
                sendErrorMessage(message.getChatId(), "An error occurred while executing the command.");
            }
        } else {
            log.debug("Unknown command: {} from user {}", commandName, message.getFrom().getId());
            sendErrorMessage(message.getChatId(), "Unknown command. Type /help for a list of available commands.");
        }
    }
    
    /**
     * Sends an error message to the user.
     */
    private void sendErrorMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        
        try {
            bot.execute(message);
        } catch (TelegramApiException e) {
            log.error("Failed to send error message: {}", e.getMessage(), e);
        }
    }
    
    /**
     * Handles the /start command.
     */
    private void handleStartCommand(String chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É Among Us –¥–ª—è –¥–∞—á–∏!\n\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –∏–ª–∏ /join –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π.\n\n" +
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help");
        
        bot.sendMessageSafe(message);
    }
    
    /**
     * Handles the /help command.
     */
    private void handleHelpCommand(String chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n" +
                "/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n" +
                "/join XXXXX - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ –ø–æ –∫–æ–¥—É\n" +
                "/leave - –ü–æ–∫–∏–Ω—É—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É\n" +
                "/ready - –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π –∫ –∏–≥—Ä–µ\n" +
                "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ª–æ–±–±–∏)\n" +
                "/lobby - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ª–æ–±–±–∏\n" +
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç\n\n" +
                "*–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:*\n" +
                "1. –°–æ–∑–¥–∞–π—Ç–µ –ª–æ–±–±–∏ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É\n" +
                "2. –ö–æ–≥–¥–∞ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥–æ—Ç–æ–≤—ã, –∏–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n" +
                "3. –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –±—É–¥—É—Ç –≤—ã–¥–∞–Ω—ã\n" +
                "4. –ò–º–ø–æ—Å—Ç–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –Ω–µ–∑–∞–º–µ—Ç–Ω–æ —É–±–∏–≤–∞—Ç—å —á–ª–µ–Ω–æ–≤ —ç–∫–∏–ø–∞–∂–∞\n" +
                "5. –í—ã–∑—ã–≤–∞–π—Ç–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω–∏—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è");
        message.enableMarkdown(true);
        
        bot.sendMessageSafe(message);
    }
    
    /**
     * Handles the /create command.
     */
    private void handleCreateCommand(String chatId, Player player) {
        // Store the player's chat ID for direct messages
        player.updateActivity();
        
        // Create new lobby
        String lobbyCode = sessionManager.createLobby(player);
        
        // Create an inline keyboard with the Ready button
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        List<InlineKeyboardButton> row = new ArrayList<>();
        InlineKeyboardButton readyButton = new InlineKeyboardButton();
        readyButton.setText("–ì–æ—Ç–æ–≤");
        readyButton.setCallbackData("ready");
        row.add(readyButton);
        
        keyboard.add(row);
        markup.setKeyboard(keyboard);
        
        // Send the welcome message
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üéÆ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –ª–æ–±–±–∏!\n\n" +
                "–ö–æ–¥ –ª–æ–±–±–∏: *" + lobbyCode + "*\n\n" +
                "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –∫–æ–¥–æ–º —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:\n" +
                "/join " + lobbyCode + "\n\n" +
                "–ö–æ–≥–¥–∞ –≤—Å–µ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã, –∏–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.");
        message.enableMarkdown(true);
        message.setReplyMarkup(markup);
        
        bot.sendMessageSafe(message);
        
        // Update the player's chat ID in the session
        Optional<GameLobby> lobby = sessionManager.getLobbyByCode(lobbyCode);
        lobby.ifPresent(l -> {
            l.getPlayer(player.getUserId()).ifPresent(p -> {
                // Update chat ID for direct messages
                sessionManager.updatePlayerChatId(p.getUserId(), chatId);
            });
        });
    }
    
    /**
     * Handles the /join command.
     */
    private void handleJoinCommand(String chatId, Player player, String[] args) {
        if (args.length == 0) {
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –ª–æ–±–±–∏:\n/join XXXXX");
            bot.sendMessageSafe(message);
            return;
        }
        
        String lobbyCode = args[0].toUpperCase();
        player.updateActivity();
        
        // Try to join the lobby
        boolean joined = sessionManager.joinLobby(lobbyCode, player);
        
        if (joined) {
            // Create an inline keyboard with the Ready button
            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton readyButton = new InlineKeyboardButton();
            readyButton.setText("–ì–æ—Ç–æ–≤");
            readyButton.setCallbackData("ready");
            row.add(readyButton);
            
            keyboard.add(row);
            markup.setKeyboard(keyboard);
            
            // Get the lobby information
            Optional<GameLobby> lobbyOpt = sessionManager.getLobbyByCode(lobbyCode);
            String playerStatus = lobbyOpt.map(GameLobby::getPlayerStatusString).orElse("");
            
            // Send the welcome message
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ª–æ–±–±–∏ *" + lobbyCode + "*!\n\n" +
                    playerStatus + "\n" +
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ì–æ—Ç–æ–≤\", –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –∏–≥—Ä–µ.");
            message.enableMarkdown(true);
            message.setReplyMarkup(markup);
            
            bot.sendMessageSafe(message);
            
            // Update the player's chat ID in the session
            sessionManager.updatePlayerChatId(player.getUserId(), chatId);
            
            // Notify other players about the new player
            lobbyOpt.ifPresent(lobby -> {
                for (Player p : lobby.getPlayers()) {
                    if (p.getUserId() != player.getUserId()) {
                        Optional<String> playerChatId = sessionManager.getPlayerChatId(p.getUserId());
                        playerChatId.ifPresent(pcid -> {
                            SendMessage notifyMessage = new SendMessage();
                            notifyMessage.setChatId(pcid);
                            notifyMessage.setText("üîî " + player.getDisplayName() + " –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ª–æ–±–±–∏!\n\n" +
                                    playerStatus);
                            notifyMessage.enableMarkdown(true);
                            bot.sendMessageSafe(notifyMessage);
                        });
                    }
                }
            });
        } else {
            // Send error message
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ª–æ–±–±–∏ —Å –∫–æ–¥–æ–º *" + lobbyCode + "*!\n" +
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n" +
                    "- –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ª–æ–±–±–∏\n" +
                    "- –õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ\n" +
                    "- –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å");
            message.enableMarkdown(true);
            bot.sendMessageSafe(message);
        }
    }
    
    /**
     * Handles the /leave command.
     */
    private void handleLeaveCommand(String chatId, Player player) {
        // Try to leave the current lobby
        boolean left = sessionManager.removePlayerFromLobby(player.getUserId());
        
        if (left) {
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("üëã –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ª–æ–±–±–∏.");
            bot.sendMessageSafe(message);
        } else {
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–æ–±–±–∏.");
            bot.sendMessageSafe(message);
        }
    }
    
    /**
     * Handles the /ready command.
     */
    private void handleReadyCommand(String chatId, Player player) {
        Optional<GameLobby> lobbyOpt = sessionManager.getLobbyForPlayer(player.getUserId());
        
        if (lobbyOpt.isPresent()) {
            GameLobby lobby = lobbyOpt.get();
            
            // Mark the player as ready
            Optional<Player> playerOpt = lobby.getPlayer(player.getUserId());
            if (playerOpt.isPresent()) {
                Player p = playerOpt.get();
                p.setReady(true);
                lobby.recordActivity();
                
                // Get updated player status
                String playerStatus = lobby.getPlayerStatusString();
                
                // Send confirmation message
                SendMessage message = new SendMessage();
                message.setChatId(chatId);
                message.setText("‚úÖ –í—ã –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π –∫ –∏–≥—Ä–µ!\n\n" + playerStatus);
                message.enableMarkdown(true);
                bot.sendMessageSafe(message);
                
                // Notify other players
                for (Player otherPlayer : lobby.getPlayers()) {
                    if (otherPlayer.getUserId() != player.getUserId()) {
                        Optional<String> playerChatId = sessionManager.getPlayerChatId(otherPlayer.getUserId());
                        playerChatId.ifPresent(pcid -> {
                            SendMessage notifyMessage = new SendMessage();
                            notifyMessage.setChatId(pcid);
                            notifyMessage.setText("üîî " + player.getDisplayName() + " –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ!\n\n" + playerStatus);
                            notifyMessage.enableMarkdown(true);
                            bot.sendMessageSafe(notifyMessage);
                        });
                    }
                }
                
                // Check if all players are ready to start the game
                if (lobby.areAllPlayersReady() && lobby.getPlayers().size() >= Config.MIN_PLAYERS) {
                    // Send game starting message to all players
                    for (Player readyPlayer : lobby.getPlayers()) {
                        Optional<String> playerChatId = sessionManager.getPlayerChatId(readyPlayer.getUserId());
                        playerChatId.ifPresent(pcid -> {
                            SendMessage startMessage = new SendMessage();
                            startMessage.setChatId(pcid);
                            startMessage.setText("üöÄ –í—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...");
                            bot.sendMessageSafe(startMessage);
                        });
                    }
                    
                    // Start the game
                    sessionManager.startGame(lobby.getLobbyCode());
                }
            }
        } else {
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–æ–±–±–∏.");
            bot.sendMessageSafe(message);
        }
    }
    
    /**
     * Handles the /settings command.
     */
    private void handleSettingsCommand(String chatId, Player player) {
        Optional<GameLobby> lobbyOpt = sessionManager.getLobbyForPlayer(player.getUserId());
        
        if (lobbyOpt.isPresent()) {
            GameLobby lobby = lobbyOpt.get();
            
            // Check if the player is the owner
            if (lobby.isOwner(player.getUserId())) {
                GameSettings settings = lobby.getSettings();
                
                // Create settings keyboard
                InlineKeyboardMarkup markup = createSettingsKeyboard(settings);
                
                // Send settings message
                SendMessage message = new SendMessage();
                message.setChatId(chatId);
                message.setText(settings.getFormattedSettings() + "\n\n" +
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.");
                message.enableMarkdown(true);
                message.setReplyMarkup(markup);
                
                bot.sendMessageSafe(message);
            } else {
                SendMessage message = new SendMessage();
                message.setChatId(chatId);
                message.setText("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ª–æ–±–±–∏ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.");
                bot.sendMessageSafe(message);
            }
        } else {
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–æ–±–±–∏.");
            bot.sendMessageSafe(message);
        }
    }
    
    /**
     * Creates the settings keyboard.
     */
    private InlineKeyboardMarkup createSettingsKeyboard(GameSettings settings) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        // Impostor count row
        List<InlineKeyboardButton> impostorRow = new ArrayList<>();
        
        InlineKeyboardButton impostorMinus = new InlineKeyboardButton();
        impostorMinus.setText("‚ûñ");
        impostorMinus.setCallbackData("settings_impostor_minus");
        impostorRow.add(impostorMinus);
        
        InlineKeyboardButton impostorCount = new InlineKeyboardButton();
        impostorCount.setText("–ò–º–ø–æ—Å—Ç–µ—Ä—ã: " + settings.getImpostorCount());
        impostorCount.setCallbackData("settings_impostor_info");
        impostorRow.add(impostorCount);
        
        InlineKeyboardButton impostorPlus = new InlineKeyboardButton();
        impostorPlus.setText("‚ûï");
        impostorPlus.setCallbackData("settings_impostor_plus");
        impostorRow.add(impostorPlus);
        
        keyboard.add(impostorRow);
        
        // Discussion time row
        List<InlineKeyboardButton> discussionRow = new ArrayList<>();
        
        InlineKeyboardButton discussionMinus = new InlineKeyboardButton();
        discussionMinus.setText("‚ûñ");
        discussionMinus.setCallbackData("settings_discussion_minus");
        discussionRow.add(discussionMinus);
        
        InlineKeyboardButton discussionTime = new InlineKeyboardButton();
        discussionTime.setText("–û–±—Å—É–∂–¥–µ–Ω–∏–µ: " + settings.getDiscussionTimeSeconds() + "—Å");
        discussionTime.setCallbackData("settings_discussion_info");
        discussionRow.add(discussionTime);
        
        InlineKeyboardButton discussionPlus = new InlineKeyboardButton();
        discussionPlus.setText("‚ûï");
        discussionPlus.setCallbackData("settings_discussion_plus");
        discussionRow.add(discussionPlus);
        
        keyboard.add(discussionRow);
        
        // Voting time row
        List<InlineKeyboardButton> votingRow = new ArrayList<>();
        
        InlineKeyboardButton votingMinus = new InlineKeyboardButton();
        votingMinus.setText("‚ûñ");
        votingMinus.setCallbackData("settings_voting_minus");
        votingRow.add(votingMinus);
        
        InlineKeyboardButton votingTime = new InlineKeyboardButton();
        votingTime.setText("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: " + settings.getVotingTimeSeconds() + "—Å");
        votingTime.setCallbackData("settings_voting_info");
        votingRow.add(votingTime);
        
        InlineKeyboardButton votingPlus = new InlineKeyboardButton();
        votingPlus.setText("‚ûï");
        votingPlus.setCallbackData("settings_voting_plus");
        votingRow.add(votingPlus);
        
        keyboard.add(votingRow);
        
        // Kill cooldown row
        List<InlineKeyboardButton> killCooldownRow = new ArrayList<>();
        
        InlineKeyboardButton killCooldownMinus = new InlineKeyboardButton();
        killCooldownMinus.setText("‚ûñ");
        killCooldownMinus.setCallbackData("settings_killcooldown_minus");
        killCooldownRow.add(killCooldownMinus);
        
        InlineKeyboardButton killCooldown = new InlineKeyboardButton();
        killCooldown.setText("–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ —É–±–∏–π—Å—Ç–≤–∞: " + settings.getKillCooldownSeconds() + "—Å");
        killCooldown.setCallbackData("settings_killcooldown_info");
        killCooldownRow.add(killCooldown);
        
        InlineKeyboardButton killCooldownPlus = new InlineKeyboardButton();
        killCooldownPlus.setText("‚ûï");
        killCooldownPlus.setCallbackData("settings_killcooldown_plus");
        killCooldownRow.add(killCooldownPlus);
        
        keyboard.add(killCooldownRow);
        
        // Tasks per player row
        List<InlineKeyboardButton> tasksRow = new ArrayList<>();
        
        InlineKeyboardButton tasksMinus = new InlineKeyboardButton();
        tasksMinus.setText("‚ûñ");
        tasksMinus.setCallbackData("settings_tasks_minus");
        tasksRow.add(tasksMinus);
        
        InlineKeyboardButton tasks = new InlineKeyboardButton();
        tasks.setText("–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –∏–≥—Ä–æ–∫–∞: " + settings.getTasksPerPlayer());
        tasks.setCallbackData("settings_tasks_info");
        tasksRow.add(tasks);
        
        InlineKeyboardButton tasksPlus = new InlineKeyboardButton();
        tasksPlus.setText("‚ûï");
        tasksPlus.setCallbackData("settings_tasks_plus");
        tasksRow.add(tasksPlus);
        
        keyboard.add(tasksRow);
        
        markup.setKeyboard(keyboard);
        return markup;
    }
    
    /**
     * Handles the /lobby command.
     */
    private void handleLobbyCommand(String chatId, Player player) {
        Optional<GameLobby> lobbyOpt = sessionManager.getLobbyForPlayer(player.getUserId());
        
        if (lobbyOpt.isPresent()) {
            GameLobby lobby = lobbyOpt.get();
            
            // Send lobby information
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("üéÆ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–±–±–∏*\n\n" +
                    "–ö–æ–¥: *" + lobby.getLobbyCode() + "*\n" +
                    "–í–ª–∞–¥–µ–ª–µ—Ü: " + lobby.getOwner().getDisplayName() + "\n\n" +
                    lobby.getSettings().getFormattedSettings() + "\n\n" +
                    lobby.getPlayerStatusString());
            message.enableMarkdown(true);
            
            bot.sendMessageSafe(message);
        } else {
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–æ–±–±–∏.");
            bot.sendMessageSafe(message);
        }
    }
} 