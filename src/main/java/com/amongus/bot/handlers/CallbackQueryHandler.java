package com.amongus.bot.handlers;

import com.amongus.bot.core.AmongUsBot;
import com.amongus.bot.core.SessionManager;
import com.amongus.bot.game.lobby.GameLobby;
import com.amongus.bot.game.states.GameSession;
import com.amongus.bot.models.Config;
import com.amongus.bot.models.Player;
import com.amongus.bot.utils.SecurityManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * Handles callback queries from inline keyboard buttons.
 */
public class CallbackQueryHandler {
    private static final Logger log = LoggerFactory.getLogger(CallbackQueryHandler.class);
    private final AmongUsBot bot;
    private final SessionManager sessionManager;
    private final SecurityManager securityManager;

    /**
     * Creates a new callback query handler.
     */
    public CallbackQueryHandler(AmongUsBot bot, SessionManager sessionManager, SecurityManager securityManager) {
        this.bot = bot;
        this.sessionManager = sessionManager;
        this.securityManager = securityManager;
    }

    /**
     * Handles a callback query from an inline keyboard button.
     */
    public void handleCallbackQuery(CallbackQuery callbackQuery) {
        String callbackData = callbackQuery.getData();
        long userId = callbackQuery.getFrom().getId();
        String queryId = callbackQuery.getId();
        String chatId = callbackQuery.getMessage().getChatId().toString();

        log.debug("Received callback query from user {}: {}", userId, callbackData);

        // First, we should acknowledge the callback query to stop the loading indicator
        acknowledgeCallbackQuery(queryId);

        // Check if the user is authorized to perform actions
        if (!securityManager.isUserAuthorized(userId)) {
            log.warn("Unauthorized user {} attempted to use callback query", userId);
            sendCallbackResponse(queryId, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.");
            return;
        }

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ª–æ–±–±–∏
        Optional<GameLobby> lobbyOpt = sessionManager.getLobbyForPlayer(userId);
        if (lobbyOpt.isPresent()) {
            GameLobby lobby = lobbyOpt.get();

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫–æ–≤ –ª–æ–±–±–∏
            handleLobbyCallback(callbackQuery, lobby);
            return;
        }

        // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        Optional<GameSession> gameSessionOpt = sessionManager.getSessionForPlayer(userId);
        if (gameSessionOpt.isPresent()) {
            GameSession gameSession = gameSessionOpt.get();
            // Let the game session handle the callback query based on the current state
            gameSession.handleCallbackQuery(bot, callbackQuery);
        } else {
            // Handle general callback queries (not related to an active game)
            handleGeneralCallbackQuery(callbackQuery);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ –ª–æ–±–±–∏
     */
    private void handleLobbyCallback(CallbackQuery callbackQuery, GameLobby lobby) {
        String data = callbackQuery.getData();
        long userId = callbackQuery.getFrom().getId();
        String chatId = callbackQuery.getMessage().getChatId().toString();

        if (data.equals("ready")) {
            Optional<Player> playerOpt = lobby.getPlayer(userId);
            if (playerOpt.isPresent()) {
                Player player = playerOpt.get();

                if (!player.isReady()) {
                    // –û—Ç–º–µ—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ –≥–æ—Ç–æ–≤–æ–≥–æ
                    player.setReady(true);
                    bot.sendTextMessageSafe(chatId, "‚úÖ –í—ã –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π –∫ –∏–≥—Ä–µ!");

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
                    for (Player p : lobby.getPlayers()) {
                        updatePlayerStatus(lobby, p);
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É
                    if (lobby.areAllPlayersReady() && lobby.getPlayers().size() >= Config.MIN_PLAYERS) {
                        // –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
                        for (Player p : lobby.getPlayers()) {
                            String pChatId = sessionManager.getPlayerChatId(p.getUserId());
                            if (pChatId != null) {
                                bot.sendTextMessageSafe(pChatId, "üöÄ –í—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...");
                            }
                        }
                        sessionManager.startGame(lobby.getLobbyCode(), bot);
                    }
                } else {
                    bot.sendTextMessageSafe(chatId, "‚úÖ –í—ã —É–∂–µ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π –∫ –∏–≥—Ä–µ!");
                }
            }
        } else if (data.equals("settings")) {
            if (lobby.isOwner(userId)) {
                SendMessage settingsMessage = new SendMessage();
                settingsMessage.setChatId(chatId);
                settingsMessage.setText(lobby.getSettings().getFormattedSettings());
                settingsMessage.enableMarkdown(true);
                settingsMessage.setReplyMarkup(createSettingsKeyboard(lobby));
                bot.sendMessageSafe(settingsMessage);
            } else {
                bot.sendTextMessageSafe(chatId, "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ª–æ–±–±–∏ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.");
            }
        } else if (data.equals("start_game")) {
            if (lobby.isOwner(userId)) {
                if (lobby.getPlayers().size() < Config.MIN_PLAYERS) {
                    bot.sendTextMessageSafe(chatId, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + Config.MIN_PLAYERS);
                    return;
                }
                if (lobby.isGameStarted()) {
                    bot.sendTextMessageSafe(chatId, "–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!");
                    return;
                }
                // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º GameSession
                Optional<GameSession> sessionOpt = sessionManager.getSessionByLobbyCode(lobby.getLobbyCode());
                GameSession session;
                if (sessionOpt.isPresent()) {
                    session = sessionOpt.get();
                } else {
                    session = new GameSession(lobby.getLobbyCode(), lobby.getOwner(), bot.getScheduler(), bot.getSecurityManager());
                    for (Player p : lobby.getPlayers()) session.addPlayer(p);
                    sessionManager.getActiveSessions().put(lobby.getLobbyCode(), session);
                }
                session.startGame(bot);
                lobby.setGameStarted(true);
                for (Player p : lobby.getPlayers()) {
                    String pChatId = sessionManager.getPlayerChatId(p.getUserId());
                    if (pChatId != null) {
                        log.info("Sending start message to {}", pChatId);
                        bot.sendTextMessageSafe(pChatId, "üöÄ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.");
                        log.info("Sent start message to {}", pChatId);
                    }
                }
            } else {
                bot.sendTextMessageSafe(chatId, "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ª–æ–±–±–∏ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É.");
            }
    } else if (data.startsWith("settings_")) {
            handleSettingsCallback(lobby, callbackQuery, data);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ –≤ –ª–æ–±–±–∏
     */
    private void updatePlayerStatus(GameLobby lobby, Player player) {
        String chatId = sessionManager.getPlayerChatId(player.getUserId());
        if (chatId == null) {
            return;
        }

        StringBuilder sb = new StringBuilder();
        sb.append("üë• *–ò–≥—Ä–æ–∫–∏* (").append(lobby.getPlayers().size()).append("/").append(Config.MAX_PLAYERS).append("):\n");
        for (Player p : lobby.getPlayers()) {
            String readyStatus = p.isReady() ? "‚úÖ" : "‚¨ú";
            String ownerLabel = lobby.isOwner(p.getUserId()) ? " üëë" : "";
            sb.append(readyStatus).append(" ")
                    .append(p.getDisplayName())
                    .append(ownerLabel)
                    .append("\n");
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ª–æ–±–±–∏
        Integer statusMessageId = lobby.getStatusMessageId(player.getUserId());

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤" –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –≥–æ—Ç–æ–≤
        if (!player.isReady()) {
            List<InlineKeyboardButton> readyRow = new ArrayList<>();
            InlineKeyboardButton readyButton = new InlineKeyboardButton();
            readyButton.setText("–ì–æ—Ç–æ–≤");
            readyButton.setCallbackData("ready");
            readyRow.add(readyButton);
            keyboard.add(readyRow);
        }

        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ - –≤–ª–∞–¥–µ–ª–µ—Ü, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
        if (lobby.isOwner(player.getUserId())) {
            // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            List<InlineKeyboardButton> settingsRow = new ArrayList<>();
            InlineKeyboardButton settingsButton = new InlineKeyboardButton();
            settingsButton.setText("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏");
            settingsButton.setCallbackData("settings");
            settingsRow.add(settingsButton);
            keyboard.add(settingsRow);

            // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
            List<InlineKeyboardButton> startGameRow = new ArrayList<>();
            InlineKeyboardButton startGameButton = new InlineKeyboardButton();
            startGameButton.setText("üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É");
            startGameButton.setCallbackData("start_game");
            startGameRow.add(startGameButton);
            keyboard.add(startGameRow);
        }

        markup.setKeyboard(keyboard);

        // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞, —É—Å—Ç–∞–Ω–æ–≤–∏–º null –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if (keyboard.isEmpty()) {
            markup = null;
        }

        try {
            if (statusMessageId != null) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try {
                    EditMessageText editMessage = new EditMessageText();
                    editMessage.setChatId(chatId);
                    editMessage.setMessageId(statusMessageId);
                    editMessage.setText(sb.toString());
                    editMessage.enableMarkdown(true);
                    editMessage.setReplyMarkup(markup);
                    bot.execute(editMessage);
                } catch (TelegramApiException e) {
                    // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    Integer newMessageId = markup != null
                            ? bot.sendMessageWithReturnIdSafe(chatId, sb.toString(), markup)
                            : bot.sendTextMessageWithReturnIdSafe(chatId, sb.toString());
                    if (newMessageId != null) {
                        lobby.setStatusMessageId(player.getUserId(), newMessageId);
                    }
                }
            } else {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
                Integer newMessageId = markup != null
                        ? bot.sendMessageWithReturnIdSafe(chatId, sb.toString(), markup)
                        : bot.sendTextMessageWithReturnIdSafe(chatId, sb.toString());
                if (newMessageId != null) {
                    lobby.setStatusMessageId(player.getUserId(), newMessageId);
                }
            }
        } catch (Exception e) {
            log.error("Error updating player status: " + e.getMessage(), e);
        }
    }


    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ª–æ–±–±–∏
     */
    private InlineKeyboardMarkup createSettingsKeyboard(GameLobby lobby) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø–æ—Å—Ç–µ—Ä–æ–≤
        List<InlineKeyboardButton> impostorRow = new ArrayList<>();
        InlineKeyboardButton impostorMinus = new InlineKeyboardButton();
        impostorMinus.setText("‚ûñ");
        impostorMinus.setCallbackData("settings_impostor_minus");
        impostorRow.add(impostorMinus);

        InlineKeyboardButton impostorCount = new InlineKeyboardButton();
        impostorCount.setText("–ò–º–ø–æ—Å—Ç–µ—Ä—ã: " + lobby.getSettings().getImpostorCount() + " ‚Üí");
        impostorCount.setCallbackData("settings_next");
        impostorRow.add(impostorCount);

        InlineKeyboardButton impostorPlus = new InlineKeyboardButton();
        impostorPlus.setText("‚ûï");
        impostorPlus.setCallbackData("settings_impostor_plus");
        impostorRow.add(impostorPlus);
        keyboard.add(impostorRow);

        // –í—Ä–µ–º—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        List<InlineKeyboardButton> discussionRow = new ArrayList<>();
        InlineKeyboardButton discussionMinus = new InlineKeyboardButton();
        discussionMinus.setText("‚ûñ");
        discussionMinus.setCallbackData("settings_discussion_minus");
        discussionRow.add(discussionMinus);

        InlineKeyboardButton discussionTime = new InlineKeyboardButton();
        discussionTime.setText("–û–±—Å—É–∂–¥–µ–Ω–∏–µ: " + lobby.getSettings().getDiscussionTimeSeconds() + "—Å");
        discussionTime.setCallbackData("settings_discussion_info");
        discussionRow.add(discussionTime);

        InlineKeyboardButton discussionPlus = new InlineKeyboardButton();
        discussionPlus.setText("‚ûï");
        discussionPlus.setCallbackData("settings_discussion_plus");
        discussionRow.add(discussionPlus);
        keyboard.add(discussionRow);

        // –í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        List<InlineKeyboardButton> votingRow = new ArrayList<>();
        InlineKeyboardButton votingMinus = new InlineKeyboardButton();
        votingMinus.setText("‚ûñ");
        votingMinus.setCallbackData("settings_voting_minus");
        votingRow.add(votingMinus);

        InlineKeyboardButton votingTime = new InlineKeyboardButton();
        votingTime.setText("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: " + lobby.getSettings().getVotingTimeSeconds() + "—Å");
        votingTime.setCallbackData("settings_voting_info");
        votingRow.add(votingTime);

        InlineKeyboardButton votingPlus = new InlineKeyboardButton();
        votingPlus.setText("‚ûï");
        votingPlus.setCallbackData("settings_voting_plus");
        votingRow.add(votingPlus);
        keyboard.add(votingRow);

        // –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ —É–±–∏–π—Å—Ç–≤–∞
        List<InlineKeyboardButton> killCooldownRow = new ArrayList<>();
        InlineKeyboardButton killCooldownMinus = new InlineKeyboardButton();
        killCooldownMinus.setText("‚ûñ");
        killCooldownMinus.setCallbackData("settings_killcooldown_minus");
        killCooldownRow.add(killCooldownMinus);

        InlineKeyboardButton killCooldown = new InlineKeyboardButton();
        killCooldown.setText("–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: " + lobby.getSettings().getKillCooldownSeconds() + "—Å");
        killCooldown.setCallbackData("settings_killcooldown_info");
        killCooldownRow.add(killCooldown);

        InlineKeyboardButton killCooldownPlus = new InlineKeyboardButton();
        killCooldownPlus.setText("‚ûï");
        killCooldownPlus.setCallbackData("settings_killcooldown_plus");
        killCooldownRow.add(killCooldownPlus);
        keyboard.add(killCooldownRow);

        // –ó–∞–¥–∞–Ω–∏—è –Ω–∞ –∏–≥—Ä–æ–∫–∞
        List<InlineKeyboardButton> tasksRow = new ArrayList<>();
        InlineKeyboardButton tasksMinus = new InlineKeyboardButton();
        tasksMinus.setText("‚ûñ");
        tasksMinus.setCallbackData("settings_tasks_minus");
        tasksRow.add(tasksMinus);

        InlineKeyboardButton tasks = new InlineKeyboardButton();
        tasks.setText("–ó–∞–¥–∞–Ω–∏—è: " + lobby.getSettings().getTasksPerPlayer());
        tasks.setCallbackData("settings_tasks_info");
        tasksRow.add(tasks);

        InlineKeyboardButton tasksPlus = new InlineKeyboardButton();
        tasksPlus.setText("‚ûï");
        tasksPlus.setCallbackData("settings_tasks_plus");
        tasksRow.add(tasksPlus);
        keyboard.add(tasksRow);

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        List<InlineKeyboardButton> backRow = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚óÄÔ∏è –ù–∞–∑–∞–¥");
        backButton.setCallbackData("settings_back");
        backRow.add(backButton);
        keyboard.add(backRow);

        markup.setKeyboard(keyboard);
        return markup;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–±–±–∏
     */
    private void handleSettingsCallback(GameLobby lobby, CallbackQuery callbackQuery, String data) {
        long userId = callbackQuery.getFrom().getId();
        String chatId = callbackQuery.getMessage().getChatId().toString();

        // –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (!lobby.isOwner(userId)) {
            bot.sendTextMessageSafe(chatId, "‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ª–æ–±–±–∏ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.");
            return;
        }

        boolean settingsChanged = false;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (data.startsWith("settings_impostor_")) {
            if (data.equals("settings_impostor_plus")) {
                int newValue = lobby.getSettings().getImpostorCount() + 1;
                lobby.getSettings().setImpostorCount(newValue);
                settingsChanged = true;
            } else if (data.equals("settings_impostor_minus")) {
                int newValue = lobby.getSettings().getImpostorCount() - 1;
                lobby.getSettings().setImpostorCount(newValue);
                settingsChanged = true;
            }
        } else if (data.startsWith("settings_discussion_")) {
            if (data.equals("settings_discussion_plus")) {
                int newValue = lobby.getSettings().getDiscussionTimeSeconds() + 15;
                lobby.getSettings().setDiscussionTimeSeconds(newValue);
                settingsChanged = true;
            } else if (data.equals("settings_discussion_minus")) {
                int newValue = lobby.getSettings().getDiscussionTimeSeconds() - 15;
                lobby.getSettings().setDiscussionTimeSeconds(newValue);
                settingsChanged = true;
            }
        } else if (data.startsWith("settings_voting_")) {
            if (data.equals("settings_voting_plus")) {
                int newValue = lobby.getSettings().getVotingTimeSeconds() + 15;
                lobby.getSettings().setVotingTimeSeconds(newValue);
                settingsChanged = true;
            } else if (data.equals("settings_voting_minus")) {
                int newValue = lobby.getSettings().getVotingTimeSeconds() - 15;
                lobby.getSettings().setVotingTimeSeconds(newValue);
                settingsChanged = true;
            }
        } else if (data.startsWith("settings_killcooldown_")) {
            if (data.equals("settings_killcooldown_plus")) {
                int newValue = lobby.getSettings().getKillCooldownSeconds() + 5;
                lobby.getSettings().setKillCooldownSeconds(newValue);
                settingsChanged = true;
            } else if (data.equals("settings_killcooldown_minus")) {
                int newValue = lobby.getSettings().getKillCooldownSeconds() - 5;
                lobby.getSettings().setKillCooldownSeconds(newValue);
                settingsChanged = true;
            }
        } else if (data.startsWith("settings_tasks_")) {
            if (data.equals("settings_tasks_plus")) {
                int newValue = lobby.getSettings().getTasksPerPlayer() + 1;
                lobby.getSettings().setTasksPerPlayer(newValue);
                settingsChanged = true;
            } else if (data.equals("settings_tasks_minus")) {
                int newValue = lobby.getSettings().getTasksPerPlayer() - 1;
                lobby.getSettings().setTasksPerPlayer(newValue);
                settingsChanged = true;
            }
        } else if (data.equals("settings_back")) {
            Player player = lobby.getPlayer(userId).orElse(null);
            if (player != null) {
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                String statusText = buildPlayerStatusText(lobby);
                InlineKeyboardMarkup markup = createPlayerStatusKeyboard(lobby, player);

                Integer newMessageId = bot.sendMessageWithReturnIdSafe(chatId, statusText, markup);
                if (newMessageId != null) {
                    lobby.setStatusMessageId(player.getUserId(), newMessageId);
                }

                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                try {
                    bot.deleteMessage(chatId, callbackQuery.getMessage().getMessageId());
                } catch (Exception e) {
                    log.error("Error deleting settings message", e);
                }
            }
            return;
        } else if (data.equals("settings_next")) {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            settingsChanged = true;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∏
        if (settingsChanged) {
            try {
                EditMessageText editMessage = new EditMessageText();
                editMessage.setChatId(chatId);
                editMessage.setMessageId(callbackQuery.getMessage().getMessageId());
                editMessage.setText(lobby.getSettings().getFormattedSettings());
                editMessage.enableMarkdown(true);
                editMessage.setReplyMarkup(createSettingsKeyboard(lobby));
                bot.execute(editMessage);
            } catch (TelegramApiException e) {
                log.error("Error updating settings message", e);
            }
        }
    }

    /**
     * –°—Ç—Ä–æ–∏—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ –ª–æ–±–±–∏
     */
    private String buildPlayerStatusText(GameLobby lobby) {
        StringBuilder sb = new StringBuilder();
        sb.append("üë• *–ò–≥—Ä–æ–∫–∏* (").append(lobby.getPlayers().size()).append("/").append(Config.MAX_PLAYERS).append("):\n");
        for (Player p : lobby.getPlayers()) {
            String readyStatus = p.isReady() ? "‚úÖ" : "‚¨ú";
            String ownerLabel = lobby.isOwner(p.getUserId()) ? " üëë" : "";
            sb.append(readyStatus).append(" ")
                    .append(p.getDisplayName())
                    .append(ownerLabel)
                    .append("\n");
        }
        return sb.toString();
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞
     */
    private InlineKeyboardMarkup createPlayerStatusKeyboard(GameLobby lobby, Player player) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤" –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –≥–æ—Ç–æ–≤
        if (!player.isReady()) {
            List<InlineKeyboardButton> readyRow = new ArrayList<>();
            InlineKeyboardButton readyButton = new InlineKeyboardButton();
            readyButton.setText("–ì–æ—Ç–æ–≤");
            readyButton.setCallbackData("ready");
            readyRow.add(readyButton);
            keyboard.add(readyRow);
        }

        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ - –≤–ª–∞–¥–µ–ª–µ—Ü, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
        if (lobby.isOwner(player.getUserId())) {
            // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            List<InlineKeyboardButton> settingsRow = new ArrayList<>();
            InlineKeyboardButton settingsButton = new InlineKeyboardButton();
            settingsButton.setText("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏");
            settingsButton.setCallbackData("settings");
            settingsRow.add(settingsButton);
            keyboard.add(settingsRow);

            // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
            List<InlineKeyboardButton> startGameRow = new ArrayList<>();
            InlineKeyboardButton startGameButton = new InlineKeyboardButton();
            startGameButton.setText("üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É");
            startGameButton.setCallbackData("start_game");
            startGameRow.add(startGameButton);
            keyboard.add(startGameRow);
        }

        markup.setKeyboard(keyboard);
        return markup;
    }


    /**
     * Handles general callback queries not related to a specific game session.
     */
    private void handleGeneralCallbackQuery(CallbackQuery callbackQuery) {
        String callbackData = callbackQuery.getData();
        String queryId = callbackQuery.getId();
        // For now, we'll just acknowledge the callback
        log.debug("Handling general callback query: {}", callbackData);
        // In a real implementation, we would parse the callback data and take appropriate action
        // This might include creating games, joining lobbies, etc.
        // Just acknowledge for now
        sendCallbackResponse(queryId, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã...");
    }

    /**
     * Acknowledges a callback query without showing a notification to the user.
     */
    private void acknowledgeCallbackQuery(String queryId) {
        AnswerCallbackQuery answer = new AnswerCallbackQuery();
        answer.setCallbackQueryId(queryId);
        try {
            bot.execute(answer);
        } catch (TelegramApiException e) {
            log.error("Failed to acknowledge callback query", e);
        }
    }

    /**
     * Sends a response to a callback query with a notification to the user.
     */
    private void sendCallbackResponse(String queryId, String text) {
        AnswerCallbackQuery answer = new AnswerCallbackQuery();
        answer.setCallbackQueryId(queryId);
        answer.setText(text);
        answer.setShowAlert(false);
        try {
            bot.execute(answer);
        } catch (TelegramApiException e) {
            log.error("Failed to send callback response", e);
        }
    }
}
