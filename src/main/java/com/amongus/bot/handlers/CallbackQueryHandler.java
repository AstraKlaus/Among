package com.amongus.bot.handlers;

import com.amongus.bot.core.AmongUsBot;
import com.amongus.bot.core.SessionManager;
import com.amongus.bot.game.lobby.GameLobby;
import com.amongus.bot.game.states.GameSession;
import com.amongus.bot.models.Config;
import com.amongus.bot.models.Player;
import com.amongus.bot.utils.SecurityManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * Handles callback queries from inline keyboard buttons.
 */
public class CallbackQueryHandler {
    private static final Logger log = LoggerFactory.getLogger(CallbackQueryHandler.class);
    private final AmongUsBot bot;
    private final SessionManager sessionManager;
    private final SecurityManager securityManager;

    /**
     * Creates a new callback query handler.
     */
    public CallbackQueryHandler(AmongUsBot bot, SessionManager sessionManager, SecurityManager securityManager) {
        this.bot = bot;
        this.sessionManager = sessionManager;
        this.securityManager = securityManager;
    }

    /**
     * Handles a callback query from an inline keyboard button.
     */
    public void handleCallbackQuery(CallbackQuery callbackQuery) {
        String callbackData = callbackQuery.getData();
        long userId = callbackQuery.getFrom().getId();
        String queryId = callbackQuery.getId();
        String chatId = callbackQuery.getMessage().getChatId().toString();

        log.debug("Received callback query from user {}: {}", userId, callbackData);

        // First, we should acknowledge the callback query to stop the loading indicator
        acknowledgeCallbackQuery(queryId);

        // Check if the user is authorized to perform actions
        if (!securityManager.isUserAuthorized(userId)) {
            log.warn("Unauthorized user {} attempted to use callback query", userId);
            sendCallbackResponse(queryId, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.");
            return;
        }

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ª–æ–±–±–∏
        Optional<GameLobby> lobbyOpt = sessionManager.getLobbyForPlayer(userId);
        if (lobbyOpt.isPresent()) {
            GameLobby lobby = lobbyOpt.get();

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫–æ–≤ –ª–æ–±–±–∏
            handleLobbyCallback(callbackQuery, lobby);
            return;
        }

        // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        Optional<GameSession> gameSessionOpt = sessionManager.getSessionForPlayer(userId);
        if (gameSessionOpt.isPresent()) {
            GameSession gameSession = gameSessionOpt.get();
            // Let the game session handle the callback query based on the current state
            gameSession.handleCallbackQuery(bot, callbackQuery);
        } else {
            // Handle general callback queries (not related to an active game)
            handleGeneralCallbackQuery(callbackQuery);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ –ª–æ–±–±–∏
     */
    private void handleLobbyCallback(CallbackQuery callbackQuery, GameLobby lobby) {
        String data = callbackQuery.getData();
        long userId = callbackQuery.getFrom().getId();
        String chatId = callbackQuery.getMessage().getChatId().toString();

        if (data.equals("ready")) {
            Optional<Player> playerOpt = lobby.getPlayer(userId);
            if (playerOpt.isPresent()) {
                Player player = playerOpt.get();

                if (!player.isReady()) {
                    // –û—Ç–º–µ—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ –≥–æ—Ç–æ–≤–æ–≥–æ
                    player.setReady(true);
                    bot.sendTextMessageSafe(chatId, "‚úÖ –í—ã –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π –∫ –∏–≥—Ä–µ!");

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
                    for (Player p : lobby.getPlayers()) {
                        updatePlayerStatus(lobby, p);
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É
                    if (lobby.areAllPlayersReady() && lobby.getPlayers().size() >= Config.MIN_PLAYERS) {
                        // –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
                        for (Player p : lobby.getPlayers()) {
                            String pChatId = sessionManager.getPlayerChatId(p.getUserId());
                            if (pChatId != null) {
                                bot.sendTextMessageSafe(pChatId, "üöÄ –í—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...");
                            }
                        }
                        sessionManager.startGame(lobby.getLobbyCode(), bot);
                    }
                } else {
                    bot.sendTextMessageSafe(chatId, "‚úÖ –í—ã —É–∂–µ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π –∫ –∏–≥—Ä–µ!");
                }
            }
        } else if (data.equals("settings")) {
            if (lobby.isOwner(userId)) {
                SendMessage settingsMessage = new SendMessage();
                settingsMessage.setChatId(chatId);
                settingsMessage.setText(lobby.getSettings().getFormattedSettings());
                settingsMessage.enableMarkdown(true);
                settingsMessage.setReplyMarkup(createSettingsKeyboard(lobby));
                bot.sendMessageSafe(settingsMessage);
            } else {
                bot.sendTextMessageSafe(chatId, "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ª–æ–±–±–∏ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.");
            }
        } else if (data.startsWith("settings_")) {
            handleSettingsCallback(lobby, callbackQuery, data);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ –≤ –ª–æ–±–±–∏
     */
    private void updatePlayerStatus(GameLobby lobby, Player player) {
        String chatId = sessionManager.getPlayerChatId(player.getUserId());
        if (chatId == null) {
            return;
        }

        StringBuilder sb = new StringBuilder();
        sb.append("üë• *–ò–≥—Ä–æ–∫–∏* (").append(lobby.getPlayers().size()).append("/").append(Config.MAX_PLAYERS).append("):\n");
        for (Player p : lobby.getPlayers()) {
            String readyStatus = p.isReady() ? "‚úÖ" : "‚¨ú";
            String ownerLabel = lobby.isOwner(p.getUserId()) ? " üëë" : "";
            sb.append(readyStatus).append(" ")
                    .append(p.getDisplayName())
                    .append(ownerLabel)
                    .append("\n");
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ª–æ–±–±–∏
        Integer statusMessageId = lobby.getStatusMessageId(player.getUserId());

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        InlineKeyboardMarkup markup = null;
        if (!player.isReady()) {
            markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

            // –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤"
            List<InlineKeyboardButton> readyRow = new ArrayList<>();
            InlineKeyboardButton readyButton = new InlineKeyboardButton();
            readyButton.setText("–ì–æ—Ç–æ–≤");
            readyButton.setCallbackData("ready");
            readyRow.add(readyButton);
            keyboard.add(readyRow);

            // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ - –≤–ª–∞–¥–µ–ª–µ—Ü, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if (lobby.isOwner(player.getUserId())) {
                List<InlineKeyboardButton> settingsRow = new ArrayList<>();
                InlineKeyboardButton settingsButton = new InlineKeyboardButton();
                settingsButton.setText("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏");
                settingsButton.setCallbackData("settings");
                settingsRow.add(settingsButton);
                keyboard.add(settingsRow);
            }

            markup.setKeyboard(keyboard);
        }

        if (statusMessageId != null) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            boolean success = bot.editMessageTextSafe(chatId, statusMessageId, sb.toString(), markup);
            if (!success) {
                // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                Integer newMessageId = markup != null
                        ? bot.sendMessageWithReturnIdSafe(chatId, sb.toString(), markup)
                        : bot.sendTextMessageWithReturnIdSafe(chatId, sb.toString());
                lobby.setStatusMessageId(player.getUserId(), newMessageId);
            }
        } else {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
            Integer newMessageId = markup != null
                    ? bot.sendMessageWithReturnIdSafe(chatId, sb.toString(), markup)
                    : bot.sendTextMessageWithReturnIdSafe(chatId, sb.toString());
            lobby.setStatusMessageId(player.getUserId(), newMessageId);
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ª–æ–±–±–∏
     */
    private InlineKeyboardMarkup createSettingsKeyboard(GameLobby lobby) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø–æ—Å—Ç–µ—Ä–æ–≤
        List<InlineKeyboardButton> impostorRow = new ArrayList<>();
        InlineKeyboardButton impostorMinus = new InlineKeyboardButton();
        impostorMinus.setText("‚ûñ");
        impostorMinus.setCallbackData("settings_impostor_minus");
        impostorRow.add(impostorMinus);

        InlineKeyboardButton impostorCount = new InlineKeyboardButton();
        impostorCount.setText("–ò–º–ø–æ—Å—Ç–µ—Ä—ã: " + lobby.getSettings().getImpostorCount());
        impostorCount.setCallbackData("settings_impostor_info");
        impostorRow.add(impostorCount);

        InlineKeyboardButton impostorPlus = new InlineKeyboardButton();
        impostorPlus.setText("‚ûï");
        impostorPlus.setCallbackData("settings_impostor_plus");
        impostorRow.add(impostorPlus);
        keyboard.add(impostorRow);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–≤—Ä–µ–º—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è, –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏ —Ç.–¥.)
        // ...

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        List<InlineKeyboardButton> backRow = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚óÄÔ∏è –ù–∞–∑–∞–¥");
        backButton.setCallbackData("settings_back");
        backRow.add(backButton);
        keyboard.add(backRow);

        markup.setKeyboard(keyboard);
        return markup;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–±–±–∏
     */
    private void handleSettingsCallback(GameLobby lobby, CallbackQuery callbackQuery, String data) {
        long userId = callbackQuery.getFrom().getId();
        String chatId = callbackQuery.getMessage().getChatId().toString();

        // –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (!lobby.isOwner(userId)) {
            bot.sendTextMessageSafe(chatId, "‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ª–æ–±–±–∏ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.");
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (data.startsWith("settings_impostor_")) {
            if (data.equals("settings_impostor_plus")) {
                lobby.getSettings().setImpostorCount(lobby.getSettings().getImpostorCount() + 1);
            } else if (data.equals("settings_impostor_minus")) {
                lobby.getSettings().setImpostorCount(lobby.getSettings().getImpostorCount() - 1);
            }
        }
        // –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        if (data.equals("settings_back")) {
            updatePlayerStatus(lobby, Objects.requireNonNull(lobby.getPlayer(userId).orElse(null)));
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        try {
            EditMessageText editMessage = new EditMessageText();
            editMessage.setChatId(chatId);
            editMessage.setMessageId(callbackQuery.getMessage().getMessageId());
            editMessage.setText(lobby.getSettings().getFormattedSettings());
            editMessage.enableMarkdown(true);
            editMessage.setReplyMarkup(createSettingsKeyboard(lobby));
            bot.execute(editMessage);
        } catch (TelegramApiException e) {
            log.error("Error updating settings message", e);
        }
    }

    /**
     * Handles general callback queries not related to a specific game session.
     */
    private void handleGeneralCallbackQuery(CallbackQuery callbackQuery) {
        String callbackData = callbackQuery.getData();
        String queryId = callbackQuery.getId();
        // For now, we'll just acknowledge the callback
        log.debug("Handling general callback query: {}", callbackData);
        // In a real implementation, we would parse the callback data and take appropriate action
        // This might include creating games, joining lobbies, etc.
        // Just acknowledge for now
        sendCallbackResponse(queryId, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã...");
    }

    /**
     * Acknowledges a callback query without showing a notification to the user.
     */
    private void acknowledgeCallbackQuery(String queryId) {
        AnswerCallbackQuery answer = new AnswerCallbackQuery();
        answer.setCallbackQueryId(queryId);
        try {
            bot.execute(answer);
        } catch (TelegramApiException e) {
            log.error("Failed to acknowledge callback query", e);
        }
    }

    /**
     * Sends a response to a callback query with a notification to the user.
     */
    private void sendCallbackResponse(String queryId, String text) {
        AnswerCallbackQuery answer = new AnswerCallbackQuery();
        answer.setCallbackQueryId(queryId);
        answer.setText(text);
        answer.setShowAlert(false);
        try {
            bot.execute(answer);
        } catch (TelegramApiException e) {
            log.error("Failed to send callback response", e);
        }
    }
}
