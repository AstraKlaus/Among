package com.amongus.bot.game.roles;

import com.amongus.bot.models.Player;
import com.amongus.bot.utils.SecurityManager;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.time.Instant;
import java.util.ArrayList;
import java.util.List;

/**
 * Implementation of the Impostor role.
 */
public class Impostor implements Role {
    private static final String ROLE_ID = "impostor";
    private final SecurityManager securityManager;
    
    public Impostor(SecurityManager securityManager) {
        this.securityManager = securityManager;
    }
    
    @Override
    public String getRoleId() {
        return ROLE_ID;
    }
    
    @Override
    public String getDisplayName() {
        return "–ò–º–ø–æ—Å—Ç–µ—Ä";
    }
    
    @Override
    public String getDescription() {
        return "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —É–±–∏—Ç—å –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —ç–∫–∏–ø–∞–∂–∞, –æ—Å—Ç–∞–≤–∞—è—Å—å –Ω–µ–∑–∞–º–µ—á–µ–Ω–Ω—ã–º.";
    }

    @Override
    public String getName() {
        return "–ü—Ä–µ–¥–∞—Ç–µ–ª—å";
    }

    @Override
    public boolean isImpostor() {
        return true;
    }
    
    @Override
    public InlineKeyboardMarkup getAbilitiesKeyboard(Player player) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        // First row: Fake Tasks and Report buttons
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        
        InlineKeyboardButton tasksButton = new InlineKeyboardButton();
        tasksButton.setText("üìã –ó–∞–¥–∞–Ω–∏—è");
        tasksButton.setCallbackData("fake_tasks");  // Note the difference for impostors
        row1.add(tasksButton);
        
        InlineKeyboardButton reportButton = new InlineKeyboardButton();
        reportButton.setText("‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ —Ç–µ–ª–µ");
        reportButton.setCallbackData("report_body");
        row1.add(reportButton);
        
        // Second row: Emergency meeting and Kill Me buttons
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        
        InlineKeyboardButton emergencyButton = new InlineKeyboardButton();
        if (player.getEmergencyMeetingsLeft() > 0) {
            emergencyButton.setText("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ (" + player.getEmergencyMeetingsLeft() + ")");
        } else {
            emergencyButton.setText("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ (0)");
        }
        emergencyButton.setCallbackData("emergency_meeting");
        row2.add(emergencyButton);
        
        InlineKeyboardButton killMeButton = new InlineKeyboardButton();
        killMeButton.setText("üíÄ –ú–µ–Ω—è —É–±–∏–ª–∏");
        killMeButton.setCallbackData("killed");
        row2.add(killMeButton);
        
        // Third row: Kill and Sabotage buttons
        List<InlineKeyboardButton> row3 = new ArrayList<>();
        
        InlineKeyboardButton killButton = new InlineKeyboardButton();
        boolean canKill = player.canKill(Instant.now());
        if (canKill) {
            killButton.setText("üî™ –£–±–∏—Ç—å");
        } else {
            killButton.setText("üî™ –£–±–∏—Ç—å (–ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞)");
        }
        killButton.setCallbackData("kill");
        row3.add(killButton);
        
        InlineKeyboardButton sabotageButton = new InlineKeyboardButton();
        sabotageButton.setText("‚ö° –°–∞–±–æ—Ç–∞–∂");
        sabotageButton.setCallbackData("sabotage");
        row3.add(sabotageButton);
        
        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);
        markup.setKeyboard(keyboard);
        
        return markup;
    }
    
    @Override
    public String getRoleRevealMessage() {
        return "üî¥ –í—ã - *–ò–º–ø–æ—Å—Ç–µ—Ä*!\n\n" +
                "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —É–±–∏—Ç—å –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —ç–∫–∏–ø–∞–∂–∞, –æ—Å—Ç–∞–≤–∞—è—Å—å –Ω–µ–∑–∞–º–µ—á–µ–Ω–Ω—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–£–±–∏—Ç—å\" –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —á–ª–µ–Ω–æ–≤ —ç–∫–∏–ø–∞–∂–∞ " +
                "–∏ \"–°–∞–±–æ—Ç–∞–∂\" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º.\n\n" +
                "*–í–ù–ò–ú–ê–ù–ò–ï*: –ö–Ω–æ–ø–∫–∞ \"–ó–∞–¥–∞–Ω–∏—è\" –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –ø—Ä–∏—Ç–≤–æ—Ä—è—Ç—å—Å—è, —á—Ç–æ –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –∑–∞–¥–∞–Ω–∏—è, –Ω–æ –æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã –≤ –æ–±—â–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.\n\n" +
                "*–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥!*";
    }
    
    @Override
    public String getEncodedRoleCallback() {
        // Using security manager to encode role information
        return securityManager.encodeRoleCallback(ROLE_ID);
    }
} 